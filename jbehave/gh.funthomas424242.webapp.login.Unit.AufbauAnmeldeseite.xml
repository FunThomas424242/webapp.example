<story path="gh/funthomas424242/webapp/login/Unit.AufbauAnmeldeseite.story" title="">
<meta>
<property keyword="@" name="author" value="FunThomas424242"/>
</meta>
<narrative keyword="Narrative:">
  <inOrderTo keyword="In order to">die Story AufbauPortalSeiten Tests definieren zu k&#246;nnen</inOrderTo>
  <asA keyword="As a">Entwickler</asA>
  <iWantTo keyword="I want to">alle Modultests als Stories definieren
Damit ich auch den Modultest mittels BDD automatisiert durchf&#252;hren kann.</iWantTo>
</narrative>
<scenario keyword="Scenario:" title="Seitenelemente pr&#252;fen">
<step outcome="successful">Gegeben sei die Datei login.html.</step>
<step outcome="successful">Wenn der Seitentitel lautet <parameter>Login</parameter></step>
<step outcome="successful">Und die &#220;berschrift Ebene1 mit der Id <parameter>welcome</parameter> lautet <parameter>Anmeldung</parameter></step>
<step outcome="successful">Wenn das Eingabefeld mit Id <parameter>user</parameter> existiert</step>
<step outcome="successful">Und das Passwordfeld mit Id <parameter>password</parameter> existiert</step>
<step outcome="successful">Wenn der Button mit der Id <parameter>ok</parameter> vom Typ <parameter>submit</parameter> und der Beschriftung <parameter>Anmelden</parameter> existiert</step>
<step outcome="pending" keyword="PENDING">Dann waren alle Tests erfolgreich und der Speicher kann bereinigt werden.

 // Button mit Hinweis Anmeldung erfolgreich
        // final HtmlLabel okMeldung = (HtmlLabel) page
        // .getHtmlElementById(&quot;meldung_ok&quot;);
        // Assert.assertEquals(&quot;Ihre Anmeldung war erfolgreich.&quot;,
        // okMeldung.asText());
        // Assert.assertEquals(&quot;hide&quot;, okMeldung.getAttribute(&quot;visible&quot;));
        //
        // // Button mit Hinweis Anmeldung fehlgeschlagen
        // final HtmlLabel errorMeldung = (HtmlLabel) page
        // .getHtmlElementById(&quot;meldung_error&quot;);
        // Assert.assertEquals(
        // &quot;Ihre Anmeldung ist nicht erfolgt - bitte Zugangsdaten pr&#252;fen.&quot;,
        // errorMeldung.asText());
        // Assert.assertEquals(&quot;hide&quot;, errorMeldung.getAttribute(&quot;visible&quot;));</step>
<pendingMethod>@Then(&quot;waren alle Tests erfolgreich und der Speicher kann bereinigt werden.\n\n // Button mit Hinweis Anmeldung erfolgreich\n        // final HtmlLabel okMeldung = (HtmlLabel) page\n        // .getHtmlElementById(\&quot;meldung_ok\&quot;);\n        // Assert.assertEquals(\&quot;Ihre Anmeldung war erfolgreich.\&quot;,\n        // okMeldung.asText());\n        // Assert.assertEquals(\&quot;hide\&quot;, okMeldung.getAttribute(\&quot;visible\&quot;));\n        //\n        // // Button mit Hinweis Anmeldung fehlgeschlagen\n        // final HtmlLabel errorMeldung = (HtmlLabel) page\n        // .getHtmlElementById(\&quot;meldung_error\&quot;);\n        // Assert.assertEquals(\n        // \&quot;Ihre Anmeldung ist nicht erfolgt - bitte Zugangsdaten pr\u00FCfen.\&quot;,\n        // errorMeldung.asText());\n        // Assert.assertEquals(\&quot;hide\&quot;, errorMeldung.getAttribute(\&quot;visible\&quot;));&quot;)
@Pending
public void thenWarenAlleTestsErfolgreichUndDerSpeicherKannBereinigtWerdenButtonMitHinweisAnmeldungErfolgreichFinalHtmlLabelOkMeldungHtmlLabelPagegetHtmlElementByIdmeldung_okAssertassertEqualsIhreAnmeldungWarErfolgreichOkMeldungasTextAssertassertEqualshideOkMeldunggetAttributevisibleButtonMitHinweisAnmeldungFehlgeschlagenFinalHtmlLabelErrorMeldungHtmlLabelPagegetHtmlElementByIdmeldung_errorAssertassertEqualsIhreAnmeldungIstNichtErfolgtBitteZugangsdatenPr&#252;fenErrorMeldungasTextAssertassertEqualshideErrorMeldunggetAttributevisible() {
  // AUSSTEHEND
}
</pendingMethod>
</scenario>
</story>
